// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  fio       String
  email     String    @unique
  phone     String    @unique
  isAdmin   Boolean   @default(false)
  password  String
  address   String?
  review    Review[]
  order     Order[]
  favorites Product[]
  basket    Basket[]
}

model Product {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  name           String   @unique
  price          Int
  description    String
  reviews_amount Int      @default(0)
  total_rating   Float    @default(0.0)
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     Int
  images         String[]
  rating         Float    @default(0)
  order          Order?   @relation(fields: [orderId], references: [id])
  orderId        Int?
  user           User?    @relation(fields: [userId], references: [id])
  userId         Int?
  basket         Basket[]
  reviews        Review[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  name      String    @unique
  product   Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  user      User     @relation(fields: [userId], references: [id])
  content   String
  images    String[]
  rating    Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  products  Product[]
  total     Int
  status    String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
}

model Basket {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  products  Product[]
  total     Int
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
}
